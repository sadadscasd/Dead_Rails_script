local AUTO_FARM_ENABLED = true
local CHECK_INTERVAL = 1.5
local MAX_FARM_TIME = 115
local ERROR_COOLDOWN = 3
local GUN_SEARCH_TIMEOUT = 15

-- Инициализация с защитой от рекурсии
if not getgenv().AutoFarmCore then
    getgenv().AutoFarmCore = {
        Initialized = false,
        GamePlaceId = nil,
        ActiveConnections = {},
        ErrorLog = {},
        SafetyCheckpoints = {},
        PerformanceMetrics = {
            LastOptimization = tick(),
            MemoryUsage = 0,
            LoopCount = 0
        }
    }
end

-- Кэширование сервисов
local Services = {
    Players = game:GetService("Players"),
    Workspace = game:GetService("Workspace"),
    TweenService = game:GetService("TweenService"),
    ReplicatedStorage = game:GetService("ReplicatedStorage"),
    RunService = game:GetService("RunService"),
    ScriptContext = game:GetService("ScriptContext")
}

-- Глобальные константы
local CONSTANTS = {
    BOND_NAME = "Bond",
    GUN_NAME = "MaximGun",
    REMOTES_PATH = {"Remotes", "EndDecision"},
    ACTIVATE_PATH = {"Shared", "Network", "RemotePromise", "Remotes", "C_ActivateObject"},
    ERROR_PATTERNS = {
        "attempt to iterate over a nil value",
        "WeaponController", 
        "ReplicatedStorage.Client.Game.Controllers"
    },
    BOND_POINTS = {
        CFrame.new(-475.66, 200.77, 21969.36),
        CFrame.new(-319.90, 200.77, 14036.94),
        CFrame.new(-15.96, 200.77, 6099.45),
        CFrame.new(-615.17, 200.77, -1836.15),
        CFrame.new(249.76, 200.77, -9067.68),
        CFrame.new(-138.72, 200.77, -17713.91),
        CFrame.new(249.76, 200.77, -9067.68),
        CFrame.new(228.52, 200.77, 5163.45),
        CFrame.new(-860.02, 200.77, -27428.81),
        CFrame.new(10.24, 200.77, -33604.30),
        CFrame.new(-322.95, 200.77, -41545.23),
        CFrame.new(-384.79, 40, -48746.83),
        CFrame.new(-379.98, 3, -49471.26),
        CFrame.new(-380.45, -23, -49332.89)
    }
}

-- Система управления памятью
local function optimizeMemory()
    local currentTime = tick()
    if currentTime - getgenv().AutoFarmCore.PerformanceMetrics.LastOptimization > 30 then
        getgenv().AutoFarmCore.PerformanceMetrics.LastOptimization = currentTime
        collectgarbage("collect")
        getgenv().AutoFarmCore.PerformanceMetrics.MemoryUsage = collectgarbage("count")
    end
end

-- Улучшенная система соединений
local ConnectionManager = {
    Connections = {},
    Add = function(self, connection, key)
        if not AUTO_FARM_ENABLED then 
            pcall(function() connection:Disconnect() end)
            return 
        end
        
        if key and self.Connections[key] then
            pcall(function() self.Connections[key]:Disconnect() end)
        end
        
        if key then
            self.Connections[key] = connection
        end
        return connection
    end,
    Cleanup = function(self)
        for key, conn in pairs(self.Connections) do
            pcall(function() conn:Disconnect() end)
            self.Connections[key] = nil
        end
    end
}

-- Адаптивная система задержек
local function dynamicWait(baseDelay)
    local delay = baseDelay * (1 + getgenv().AutoFarmCore.PerformanceMetrics.LoopCount * 0.001)
    delay = math.min(delay, 2.0)
    task.wait(delay)
    getgenv().AutoFarmCore.PerformanceMetrics.LoopCount += 1
end

-- Улучшенный обработчик ошибок
local function enhancedErrorHandler(message, traceback)
    for _, pattern in ipairs(CONSTANTS.ERROR_PATTERNS) do
        if string.find(message, pattern) then
            table.insert(getgenv().AutoFarmCore.ErrorLog, {
                Message = message,
                Time = tick(),
                Traceback = traceback
            })
            
            if #getgenv().AutoFarmCore.ErrorLog > 5 then
                table.remove(getgenv().AutoFarmCore.ErrorLog, 1)
            end
            
            local player = Services.Players.LocalPlayer
            if player and player.Character then
                local humanoid = player.Character:FindFirstChild("Humanoid")
                if humanoid and humanoid.Health > 0 then
                    pcall(function()
                        humanoid:TakeDamage(humanoid.MaxHealth)
                    end)
                end
            end
            break
        end
    end
end

-- Оптимизированный поиск объектов
local function fastFind(path, parent)
    parent = parent or Services.ReplicatedStorage
    local current = parent
    for _, name in ipairs(path) do
        current = current:FindFirstChild(name)
        if not current then return nil end
    end
    return current
end

-- Система безопасного выполнения
local function protectedCall(callback, ...)
    local success, result = pcall(callback, ...)
    if not success then
        table.insert(getgenv().AutoFarmCore.ErrorLog, {
            Message = result,
            Time = tick(),
            Traceback = debug.traceback()
        })
        return false
    end
    return result
end

-- Основная логика фарма
local function executeFarmStrategy()
    local player = Services.Players.LocalPlayer
    if not player then return false end

    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:WaitForChild("Humanoid")
    local rootPart = character:WaitForChild("HumanoidRootPart")

    -- Инициализация удаленных объектов
    local endDecision = fastFind(CONSTANTS.REMOTES_PATH)
    local activateRemote = fastFind(CONSTANTS.ACTIVATE_PATH)
    
    if not endDecision or not activateRemote then
        warn("Критические объекты не найдены")
        return false
    end

    -- Основной цикл фарма
    local startTime = tick()
    while AUTO_FARM_ENABLED and tick() - startTime < MAX_FARM_TIME do
        optimizeMemory()
        
        protectedCall(function()
            -- Быстрый сбор бондов
            local runtime = Services.Workspace:FindFirstChild("RuntimeItems")
            if runtime then
                for _, item in ipairs(runtime:GetChildren()) do
                    if item.Name == CONSTANTS.BOND_NAME then
                        activateRemote:FireServer(item)
                        dynamicWait(0.01)
                    end
                end
            end

            -- Отправка финального решения
            endDecision:FireServer(false)
        end)
        
        dynamicWait(0.3)
    end

    -- Завершающая процедура
    protectedCall(function()
        if humanoid and humanoid.Health > 0 then
            humanoid:TakeDamage(humanoid.MaxHealth)
        end
    end)

    return true
end

-- Главная инициализация
local function initializeFarmSystem()
    if getgenv().AutoFarmCore.Initialized then return end
    
    -- Настройка обработчика ошибок
    ConnectionManager:Add(Services.ScriptContext.Error:Connect(enhancedErrorHandler), "error_handler")
    
    -- Ожидание загрузки игры
    while Services.Players.LocalPlayer == nil do
        dynamicWait(1)
    end

    getgenv().AutoFarmCore.GamePlaceId = game.PlaceId
    getgenv().AutoFarmCore.Initialized = true

    -- Основной рабочий цикл
    while AUTO_FARM_ENABLED do
        if game.PlaceId == getgenv().AutoFarmCore.GamePlaceId then
            executeFarmStrategy()
        else
            dynamicWait(CHECK_INTERVAL)
        end
    end

    -- Очистка при завершении
    ConnectionManager:Cleanup()
end

-- Запуск системы
protectedCall(initializeFarmSystem)
